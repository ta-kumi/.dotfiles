{
	// --- 常用
	"main": {
		"prefix": "ffmain",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"using ll = long long;",
			"#define  rep(i, n, m) for (ll i = (ll)(n); i < (ll)(m); ++i)",
			"#define rrep(i, n, m) for (ll i = (ll)(m - 1); i >= (ll)(n); --i)",
			"#define  all(a, n, m) ((a).begin() + (n)), ((a).begin() + (m))",
			"#define rall(a, n, m) ((a).rend() - (m)), ((a).rend() - (n))",
			"",
			"int main(void) {",
			"\t$1",
			"}",
		],
		"description": "main関数"
	},
	"mydata": {
		"prefix": "ffmydata",
		"body": [
			"struct MyData {",
			"\tll x;",
			"\tll y;",
			"\tll z;",
			"",
			"\tbool operator<(const MyData &other) const {",
			"\t\tif (x != other.x) {",
			"\t\t\treturn x < other.x;",
			"\t\t}",
			"\t\telse if (y != other.y) {",
			"\t\t\treturn y < other.y;",
			"\t\t}",
			"\t\telse {",
			"\t\t\treturn z < other.z;",
			"\t\t}",
			"\t}",
			"};",
		],
		"description": "sortに対応したMyData"
	},

	// --- アルゴリズム
	"modpow": {
		"prefix": "ffmodpow",
		"body": [
			"// 概要：a^bをmodで割った余りを返す",
			"// 引数：a, b, mod",
			"// 返値：a^bをmodで割った余りを返す",
			"ll modpow(const ll a, const ll b, const ll mod) {",
			"\tll ret = 1;",
			"\tll pow = a;",
			"\tll bit = 0;",
			"",
			"\twhile (b >= (1ULL << bit)) {",
			"\t\tif ((b & (1ULL << bit)) != 0) {",
			"\t\t\tret *= pow;",
			"\t\t\tret %= mod;",
			"\t\t}",
			"\t\tpow *= pow;",
			"\t\tpow %= mod;",
			"\t\tbit++;",
			"\t}",
			"",
			"\treturn ret;",
			"}",
		],
		"description": "掛け算の答えを割ったときの余り"
	},
	"moddiv": {
		"prefix": "ffmoddiv",
		"body": [
			"// 概要：a/bをmodで割った余りを返す",
			"// 引数：a, b, mod",
			"// 返値：a/bをmodで割った余りを返す",
			"ll moddiv(const ll a, const ll b, const ll mod) {",
			"\treturn (a * modpow(b, mod - 2, mod)) % mod;",
			"}",
		],
		"description": "割り算の答えを割ったときの余り"
	},
	"binary_search": {
		"prefix": "ffbinarysearch",
		"body": [
			"// 概要：2分探索（ソートされた引数リストから引数値を検索する）",
			"// 引数：リスト",
			"// 返値：値が存在した場合は添字、存在しない場合は-1",
			"ll binary_search(vector<ll> list, ll value) {",
			"\tll low = 0;",
			"\tll high = list.size() - 1;",
			"",
			"\twhile (low <= high) {",
			"\t\tll mid = (low + high) / 2;",
			"\t\tif (value == list[mid]) {",
			"\t\t\treturn mid;",
			"\t\t} else if (value < list[mid]) {",
			"\t\t\thigh = mid - 1;",
			"\t\t} else if (value > list[mid]) {",
			"\t\t\tlow = mid + 1;",
			"\t\t}",
			"\t}",
			"",
			"\treturn -1;",
			"}",
		],
		"description": "2分探索"
	},
	"bit_all_search": {
		"prefix": "ffbitsearch",
		"body": [
			"// 概要：引数リストの部分集合全パターンを返す",
			"// 引数：リスト",
			"// 返値：部分集合前パターンのリスト（リスト要素数^2パターン）",
			"template <typename T>",
			"vector<vector<T>> bit_all_search(const vector<T>& list) {",
			"\tll size = list.size();",
			"\tvector<vector<T>> result;",
			"",
			"\trep(i, 0, (1ULL << size)) {",
			"\t\tvector<T> tmp;",
			"\t\trep(j, 0, size) {",
			"\t\t\tif (((1 << j) & i) != 0) {",
			"\t\t\t\ttmp.push_back(list[j]);",
			"\t\t\t}",
			"\t\t}",
			"\t\tresult.push_back(tmp);",
			"\t}",
			"",
			"\treturn result;",
			"}",
		],
		"description": "ビット全検索"
	},
	"knapsack_problem": {
		"prefix": "ffknapsack",
		"body": [
			"// 概要：重さw[N]、価値v[N]の品物のうち、最大重さWまでの最大価値を求める",
			"// 引数：品物数N、最大重さW、重さリストw、価値リストv",
			"// 返値：[i個までの品物][jまでの重さ]における最大価値を代入した2次元配dp[N+1][W+1]",
			"vector<vector<ll>> knapsack_problem(",
			"\tconst ll N, const ll W,",
			"\tconst vector<ll>& w, const vector<ll>& v",
			") {",
			"\tvector<vector<ll>> dp(N+1, vector<ll>(W+1, 0));",
			"",
			"\trep(i, 1, N+1) rep(j, 0, W+1) {",
			"\t\tif (j < w[i-1]) {",
			"\t\t\tdp[i][j] = dp[i-1][j];",
			"\t\t}",
			"\t\tif (j == w[i-1]) {",
			"\t\t\tdp[i][j] = max(",
			"\t\t\t\tdp[i-1][j],",
			"\t\t\t\tdp[i-1][j-w[i-1]] + v[i-1]",
			"\t\t\t);",
			"\t\t}",
			"\t\tif (j > w[i-1]) {",
			"\t\t\tif (dp[i-1][j-w[i-1]] != 0) {",
			"\t\t\t\tdp[i][j] = max(",
			"\t\t\t\t\tdp[i-1][j],",
			"\t\t\t\t\tdp[i-1][j-w[i-1]] + v[i-1]",
			"\t\t\t\t);",
			"\t\t\t} else {",
			"\t\t\t\tdp[i][j] = dp[i-1][j];",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"\treturn dp;",
			"}",
		],
		"description": "ナップザック問題"
	},
	"segument_tree" : {
		"prefix": "ffsegumenttree",
		"body": [
			"// 概要：セグメントツリー",
			"// 補足：配列の特定区間からデータを取得するクエリを効率化",
			"class SeguentTree {",
			"private:",
			"\tll size;",
			"\tvector<ll> node;",
			"",
			"public:",
			"\t// 配列サイズsize",
			"\tSeguentTree(const ll size) {",
			"\t\tthis->size = size;",
			"\t\tnode = vector<ll>(size * 2, 0);",
			"\t}",
			"",
			"\t// SegmentTreeの結合条件を指定",
			"\t// 例：合計値を求めるならばa+bを返す",
			"\tll combine(const ll a, const ll b) {",
			"\t\treturn max(a, b);",
			"\t}",
			"",
			"\t// pos番目の値をvalueに変更(posは1始まり)",
			"\tvoid update(const ll pos, const ll value) {",
			"\t\tll p = pos - 1 + size;",
			"\t\tnode[p] = value;",
			"\t\twhile (p > 1) {",
			"\t\t\tp /= 2;",
			"\t\t\tnode[p] = combine(node[p * 2], node[p * 2 + 1]);",
			"\t\t}",
			"\t}",
			"",
			"\t// lからrまでの区間における値を返す(lは1始まり)",
			"\tll query(const ll left, const ll right) {",
			"\t\tll res = 0;",
			"\t\tll l = left + size - 1;",
			"\t\tll r = right + size - 1;",
			"\t\twhile (l <= r) {",
			"\t\t\tif (l % 2 == 1) {",
			"\t\t\t\tres = combine(res, node[l]);",
			"\t\t\t\tl++;",
			"\t\t\t}",
			"\t\t\tif (r % 2 == 0) {",
			"\t\t\t\tres = combine(res, node[r]);",
			"\t\t\t\tr--;",
			"\t\t\t}",
			"\t\t\tl /= 2;",
			"\t\t\tr /= 2;",
			"\t\t}",
			"\t\treturn res;",
			"\t}",
			"};",
		],
		"description": "セグメント木"
	},
	"dfs": {
		"prefix": "ffdfs",
		"body": [
			"// 概要：隣接リストGに対し、深さ優先探索を行う",
			"// 引数：隣接リストG, 検索開始位置pos,",
			"//      拡張点の検索可否を示すリストvisited(visited(N+1, false))",
			"// 返値：なし",
			"void dfs(",
			"\tconst vector<vector<ll>>& G,",
			"\tconst ll pos,",
			"\tvector<bool>& visited",
			") {",
			"\tvisited[pos] = true;",
			"\tfor (auto next : G[pos]) {",
			"\t\tif (visited[next] == false) {",
			"\t\t\tdfs(G, next, visited);",
			"\t\t}",
			"\t}",
			"\t// 以下を有効にすると、全パターン検索",
			"\t// visited[pos] = false;",
			"}",
		],
		"description": "深さ優先探索"
	},
	"bfs": {
		"prefix": "ffbfs",
		"body": [
			"// 概要：隣接リストGに対し、幅優先探索を行う",
			"// 引数：隣接リストG, 検索開始位置pos",
			"// 返値：各頂点への距離を示すリストdist",
			"vector<ll> bfs(",
			"\tconst vector<vector<ll>>& G,",
			"\tconst ll pos",
			") {",
			"\tdeque<ll> dq;",
			"\tvector<ll> dist(G.size(), -1);",
			"",
			"\tdq.push_back(pos);",
			"\tdist[pos] = 0;",
			"\twhile (dq.size() > 0) {",
			"\t\tll p = dq.front(); dq.pop_front();",
			"\t\tll d = dist[p];",
			"\t\tfor (auto next : G[p]) {",
			"\t\t\tif (dist[next] == -1) {",
			"\t\t\t\tdist[next] = d + 1;",
			"\t\t\t\tdq.push_back(next);",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"\treturn dist;",
			"}",
		],
		"description": "幅優先探索"
	},
	"dijkstra" : {
		"prefix": "ffdijkstra",
		"body": [
			"// 概要：隣接リストGに対し、ダイクストラ法で最短距離を算出する",
			"// 引数：隣接リストG（距離を含む）, 検索開始位置pos",
			"// 返値：各頂点への距離を示すリストdist",
			"vector<ll> dijkstra(",
			"\tconst vector<vector<pair<ll, ll>>>& G,",
			"\tconst ll pos",
			") {",
			"\tpriority_queue<",
			"\t\tpair<ll, ll>,",
			"\t\tvector<pair<ll, ll>>,",
			"\t\tgreater<pair<ll, ll>>",
			"\t> pq;",
			"\tvector<ll> dist(G.size(), -1);",
			"",
			"\tpq.push({0, pos});",
			"\tdist[pos] = 0;",
			"\twhile (pq.empty() == false) {",
			"\t\tll p = pq.top().second;",
			"\t\tll d = pq.top().first;",
			"\t\tpq.pop();",
			"\t\tif (dist[p] < d) continue;",
			"\t\tfor (auto next : G[p]) {",
			"\t\t\tll np = next.first;",
			"\t\t\tll nd = next.second;",
			"\t\t\tif (dist[np] == -1 || dist[np] > dist[p] + nd) {",
			"\t\t\t\tdist[np] = dist[p] + nd;",
			"\t\t\t\tpq.push({dist[np], np});",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"\treturn dist;",
			"}",
		],
		"description": "ダイクストラ法"
	},
	"unifonfind" : {
		"prefix": "ffunionfind",
		"body": [
			"// 概要：ユニオンファインド木",
			"// 補足：特定の要素同士が連結条件にあるかを効率的に判定",
			"class UnionFind {",
			"private:",
			"\tvector<ll> parent;",
			"\tvector<ll> size;",
			"",
			"\t// 要素posの根を返す（posは1始まり）",
			"\tll root(const ll pos) {",
			"\t\tll p = pos;",
			"\t\twhile (true) {",
			"\t\t\tif (parent[p] == -1) break;",
			"\t\t\tp = parent[p];",
			"\t\t}",
			"\t\treturn p;",
			"\t}",
			"",
			"public:",
			"\t// 要素数size",
			"\tUnionFind(const ll size) {",
			"\t\tthis->parent = vector<ll>(size+1, -1);",
			"\t\tthis->size = vector<ll>(size+1, 1);",
			"\t}",
			"",
			"\t// 要素uと要素vを結合する（uとvは1始まり）",
			"\tvoid unite(const ll u, const ll v) {",
			"\t\tll ru = root(u);",
			"\t\tll rv = root(v);",
			"\t\tif (ru == rv) return;",
			"\t\tif (size[ru] < size[rv]) {",
			"\t\t\tparent[ru] = rv;",
			"\t\t\tsize[rv] += size[ru];",
			"\t\t}",
			"\t\telse {",
			"\t\t\tparent[rv] = ru;",
			"\t\t\tsize[ru] += size[rv];",
			"\t\t}",
			"\t}",
			"",
			"\t// 要素uと要素vが同じグループかどうか（uとvは1始まり）",
			"\tbool same(const ll u, const ll v) {",
			"\t\treturn root(u) == root(v);",
			"\t}",
			"};",
		],
		"description": "ユニオンファインド木"
	},
	"maximumflow" : {
		"prefix": "ffmaximumflow",
		"body": [
			"// 概要：最大フロー",
			"// 補足：ある頂点から別の頂点への最大流量を求める",
			"class MaximumFlow {",
			"private:",
			"\tstruct Edge {",
			"\t\tll to;  // 行き先",
			"\t\tll cap; // 容量",
			"\t\tll rev; // 逆辺がG[to]の中で何番目の要素か",
			"\t};",
			"\tll size = 0;",
			"\tvector<vector<Edge>> G;",
			"\tvector<bool> used;",
			"",
			"\t// posからgoalまでの最大流量を求める。fは流せる最大流量",
			"\tll dfs(const ll pos, const ll goal, const ll f) {",
			"\t\tif (pos == goal) return f;",
			"\t\tused[pos] = true;",
			"\t\tfor (auto& next: G[pos]) {",
			"\t\t\tif (next.cap == 0) continue;",
			"\t\t\tif (used[next.to] == true) continue;",
			"\t\t\t// goalまでのパスと最大流量を求め、流せる場合は残余グラフを更新",
			"\t\t\tll flow = dfs(next.to, goal, min(f, next.cap));",
			"\t\t\tif (flow >= 1) {",
			"\t\t\t\tnext.cap -= flow;",
			"\t\t\t\tG[next.to][next.rev].cap += flow;",
			"\t\t\t\treturn flow;",
			"\t\t\t}",
			"\t\t}",
			"\t\treturn 0;",
			"\t}",
			"",
			"",
			"public:",
			"\t// 頂点数size",
			"\tMaximumFlow(const ll size) {",
			"\t\tthis->size = size;",
			"\t\tthis->G = vector<vector<Edge>>(size + 1);",
			"\t\tthis->used = vector<bool>(size + 1, false);",
			"\t}",
			"",
			"\t// 要素を追加する",
			"\tvoid add_edge(const ll from, const ll to, const ll cap) {",
			"\t\tll fs = G[from].size();",
			"\t\tll ts = G[to].size();",
			"\t\tG[from].push_back(Edge{to, cap, ts});",
			"\t\tG[to].push_back(Edge{from, 0, fs});",
			"\t}",
			"",
			"\t// 頂点sから頂点tへの最大フロー総流量を求める",
			"\tll max_flow(const ll s, const ll t) {",
			"\t\tll total_flow = 0;",
			"\t\twhile (true) {",
			"\t\t\trep(i, 0, size+1) used[i] = false;",
			"\t\t\tll f = dfs(s, t, LLONG_MAX);",
			"\t\t\tif (f == 0) break;",
			"\t\t\ttotal_flow += f;",
			"\t\t}",
			"\t\treturn total_flow;",
			"\t}",
			"};",
		],
		"description": "最大フロー問題"
	},
}
