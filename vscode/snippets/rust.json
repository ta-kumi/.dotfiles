{
	// --- 常用
	"main": {
		"prefix": "ffmain",
		"body": [
			"#![allow(non_snake_case)]",
			"#![allow(non_camel_case_types)]",
			"#![allow(dead_code)]",
			"#![allow(unused_variables)]",
			"#![allow(unused_imports)]",
			"#![allow(clippy::needless_range_loop)]",
			"",
			"type i = i64;",
			"type u = usize;",
			"type f = f64;",
			"type c = char;",
			"type s = String;",
			"type b = bool;",
			"",
			"use std::cmp::*;",
			"use std::collections::*;",
			"",
			"fn main() {",
			"    $1",
			"}",
			"",
			"fn read<T>() -> T",
			"where",
			"    T: std::str::FromStr,",
			"    T::Err: std::fmt::Debug,",
			"{",
			"    use std::io::Read;",
			"    let input = std::io::stdin()",
			"        .bytes()",
			"        .map(|b| b.unwrap() as char)",
			"        .skip_while(|c| c.is_whitespace())",
			"        .take_while(|c| !c.is_whitespace())",
			"        .collect::<String>();",
			"    input.parse().unwrap()",
			"}",
			"",
			"fn rvec<T>(size: usize) -> Vec<T>",
			"where",
			"    T: std::str::FromStr,",
			"    T::Err: std::fmt::Debug,",
			"{",
			"    (0..size).map(|_| read()).collect()",
			"}",
			"",
			"fn rstr() -> Vec<char> {",
			"    read::<String>().chars().collect()",
			"}",
			"",
			"fn rline() -> Vec<String> {",
			"    let mut buf = String::new();",
			"    std::io::stdin().read_line(&mut buf).unwrap();",
			"    buf.split_whitespace().map(str::to_string).collect()",
			"}",
		],
		"description": "main関数"
	},

	// --- アルゴリズム
	"numberofreversals": {
		"prefix": "ffnumberofreversals",
		"body": [
			"// 概要：配列を昇順ソートした際の反転数（バブルソートした際のswap数）を返す",
			"//      反転数は、XXに活用できる",
			"// 引数：配列、反転数を求める範囲の左端、右端（N-1ではなくNを指定することに注意）",
			"// 返値：反転数",
			"fn number_of_reversals<T>(list: &mut [T], left: u, right: u) -> u",
			"where",
			"    T: PartialOrd + Clone,",
			"{",
			"    let mut cnt: u = 0;",
			"    if right - left > 1 {",
			"        let mid = (left + right) / 2;",
			"        cnt += number_of_reversals(list, left, mid);",
			"        cnt += number_of_reversals(list, mid, right);",
			"        cnt += merge(list, left, mid, right);",
			"    }",
			"    return cnt;",
			"",
			"    fn merge<T>(A: &mut [T], left: u, mid: u, right: u) -> u",
			"    where",
			"        T: PartialOrd + Clone,",
			"    {",
			"        let L = A[left..mid].to_vec();",
			"        let R = A[mid..right].to_vec();",
			"",
			"        let mut cnt: u = 0;",
			"        let mut l: u = 0;",
			"        let mut r: u = 0;",
			"        for index in left..right {",
			"            if l < L.len() && (r >= R.len() || L[l] <= R[r]) {",
			"                A[index] = L[l].clone();",
			"                l += 1;",
			"            } else {",
			"                A[index] = R[r].clone();",
			"                r += 1;",
			"                cnt += (mid - left) - l;",
			"            }",
			"        }",
			"",
			"        cnt",
			"    }",
			"}",
		],
		"description": "配列を昇順ソートした際の反転数（バブルソートした際のswap数）を求める"
	},
	"binary_search": {
		"prefix": "ffbinarysearch",
		"body": [
			"// 概要：2分探索（ソートされた引数リストから引数値を検索する）",
			"// 引数：リスト、検索する値",
			"// 返値：値が存在した場合はSome(添字)、存在しない場合はNone",
			"fn binary_search<T>(list: &[T], value: T) -> Option<u>",
			"where",
			"    T: PartialOrd,",
			"{",
			"    let mut low = 0;",
			"    let mut high = list.len() - 1;",
			"",
			"    while low <= high {",
			"        let mid = (low + high) / 2;",
			"        match list[mid].partial_cmp(&value).unwrap() {",
			"            Ordering::Equal => return Some(mid),",
			"            Ordering::Less => low = mid + 1,",
			"            Ordering::Greater => high = mid - 1,",
			"        }",
			"    }",
			"",
			"    None",
			"}",
		],
		"description": "2分探索"
	},
	"bit_all_search": {
		"prefix": "ffbitsearch",
		"body": [
			"// 概要：引数リストの部分集合全パターンを返す",
			"// 引数：リスト",
			"// 返値：部分集合前パターンのリスト（リスト要素数^2パターン）",
			"fn bit_all_search<T: Clone>(list: &[T]) -> Vec<Vec<T>> {",
			"    let len: u = list.len();",
			"    let mut ret: Vec<Vec<T>> = vec![];",
			"",
			"    for i in 0..(1 << len) {",
			"        let mut tmp: Vec<T> = vec![];",
			"        for j in 0..len {",
			"            if i & (1 << j) != 0 {",
			"                tmp.push(list[j].clone());",
			"            }",
			"        }",
			"        ret.push(tmp);",
			"    }",
			"",
			"    ret",
			"}",
		],
		"description": "ビット全検索"
	},
}
